{"ast":null,"code":"var _jsxFileName = \"/home/rgukt-basar/Downloads/placement-prep-starter/client/src/components/PostJob.js\",\n  _s = $RefreshSig$();\n/*import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const platformFee = \"0.001\"; // ETH or MATIC\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"Wallet connection failed\");\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const tx = await signer.sendTransaction({\n        to: \"0xF2f8466780f45536bC254d0882A4F6608b631b88\",\n        value: ethers.parseEther(platformFee),\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + err.message);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n    } catch (err) {\n      alert(\"Error: \" + err.response.data.error);\n    }\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        {}\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button onClick={() => setMode(\"paid\")} style={mode === \"paid\" ? activeBtn : inactiveBtn}>\n            Post With Payment\n          </button>\n          <button onClick={() => setMode(\"free\")} style={mode === \"free\" ? activeBtn : inactiveBtn}>\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {}\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle}>Connect Wallet</button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle}>Pay {platformFee} ETH</button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input name=\"_id\" placeholder=\"Job ID\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"profile\" placeholder=\"Profile\" onChange={handleChange} required style={inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Description\" onChange={handleChange} required style={textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"techs\" placeholder=\"Techs (comma separated)\" onChange={handleChange} required style={inputStyle} />\n          <button type=\"submit\" style={submitStyle}>\n            Post Job\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Styles\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n};\n\nconst formBox = {\n  background: \"#fff\",\n  padding: \"2rem\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n  width: \"400px\",\n  textAlign: \"center\",\n};\n\nconst headingStyle = {\n  marginBottom: \"1rem\",\n  color: \"#4b0082\",\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst textareaStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  height: \"80px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst btnStyle = {\n  marginBottom: \"1rem\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#6a1b9a\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  fontSize: \"15px\",\n};\n\nconst submitStyle = {\n  width: \"100%\",\n  padding: \"12px\",\n  backgroundColor: \"#4b0082\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"6px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst activeBtn = {\n  ...btnStyle,\n  backgroundColor: \"#4b0082\",\n  marginRight: \"10px\",\n};\n\nconst inactiveBtn = {\n  ...btnStyle,\n  backgroundColor: \"#bbb\",\n  marginRight: \"10px\",\n};\n\nexport default PostJob;*/\n/*import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const platformFee = \"0.00001\"; // in MATIC\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"Wallet connection failed\");\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const tx = await signer.sendTransaction({\n        to: \"0x0A499e74e5C49e111a9D86Ae6A5f1306982782Bf\",\n        value: ethers.parseEther(platformFee),\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + err.message);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n    } catch (err) {\n      alert(\"Error: \" + err?.response?.data?.error || \"Something went wrong\");\n    }\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        {}\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button onClick={() => setMode(\"paid\")} style={mode === \"paid\" ? activeBtn : inactiveBtn}>\n            Post With Payment\n          </button>\n          <button onClick={() => setMode(\"free\")} style={mode === \"free\" ? activeBtn : inactiveBtn}>\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {}\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle}>Connect Wallet</button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle}>Pay {platformFee} MATIC</button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input name=\"_id\" placeholder=\"Job ID\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"profile\" placeholder=\"Profile\" onChange={handleChange} required style={inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Description\" onChange={handleChange} required style={textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"techs\" placeholder=\"Techs (comma separated)\" onChange={handleChange} required style={inputStyle} />\n          <button type=\"submit\" style={submitStyle}>\n            Post Job\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Styles\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n};\n\nconst formBox = {\n  background: \"#fff\",\n  padding: \"2rem\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n  width: \"400px\",\n  textAlign: \"center\",\n};\n\nconst headingStyle = {\n  marginBottom: \"1rem\",\n  color: \"#4b0082\",\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst textareaStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  height: \"80px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst btnStyle = {\n  marginBottom: \"1rem\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#6a1b9a\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  fontSize: \"15px\",\n};\n\nconst submitStyle = {\n  width: \"100%\",\n  padding: \"12px\",\n  backgroundColor: \"#4b0082\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"6px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst activeBtn = {\n  ...btnStyle,\n  backgroundColor: \"#4b0082\",\n  marginRight: \"10px\",\n};\n\nconst inactiveBtn = {\n  ...btnStyle,\n  backgroundColor: \"#bbb\",\n  marginRight: \"10px\",\n};\n\nexport default PostJob;*/\n\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostJob() {\n  _s();\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\"\n  });\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const platformFee = \"0.00001\"; // in AMOY for Polygon Amoy Testnet\n  const receiverAddress = \"0x0A499e74e5C49e111a9D86Ae6A5f1306982782Bf\"; // Replace with your actual receiver address\n\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n    try {\n      setLoading(true);\n      // First ensure we're on Polygon Amoy Testnet\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: \"0x13882\"\n        }] // Polygon Amoy chainId\n      });\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setWalletAddress(accounts[0]);\n\n      // Verify balance\n      const balance = await provider.getBalance(accounts[0]);\n      console.log(\"AMOY Balance:\", ethers.formatEther(balance));\n    } catch (err) {\n      if (err.code === 4902) {\n        // Network not added, let's add it\n        await addPolygonAmoyNetwork();\n        await connectWallet(); // Retry connection\n      } else {\n        alert(\"Wallet connection failed: \" + err.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addPolygonAmoyNetwork = async () => {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId: \"0x13882\",\n          chainName: \"Polygon Amoy Testnet\",\n          nativeCurrency: {\n            name: \"AMOY\",\n            symbol: \"AMOY\",\n            decimals: 18\n          },\n          rpcUrls: [\"https://rpc-amoy.polygon.technology\"],\n          blockExplorerUrls: [\"https://www.oklink.com/amoy\"]\n        }]\n      });\n    } catch (err) {\n      alert(\"Failed to add Polygon Amoy network: \" + err.message);\n    }\n  };\n  const payPlatformFee = async () => {\n    try {\n      setLoading(true);\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      // Get fee data (replaces getGasPrice in ethers v6)\n      const feeData = await provider.getFeeData();\n\n      // Get gas estimate\n      const gasEstimate = await provider.estimateGas({\n        from: walletAddress,\n        to: receiverAddress,\n        value: ethers.parseEther(platformFee)\n      });\n\n      // Check balance\n      const balance = await provider.getBalance(walletAddress);\n      const requiredBalance = gasEstimate * feeData.gasPrice + ethers.parseEther(platformFee);\n      if (balance < requiredBalance) {\n        throw new Error(`Insufficient funds. Need ${ethers.formatEther(requiredBalance)} AMOY but have ${ethers.formatEther(balance)}`);\n      }\n      const tx = await signer.sendTransaction({\n        to: receiverAddress,\n        value: ethers.parseEther(platformFee),\n        gasLimit: gasEstimate,\n        maxFeePerGas: feeData.maxFeePerGas,\n        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + (err.reason || err.message));\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map(t => t.trim()),\n      payerAddress: mode === \"paid\" ? walletAddress : null\n    };\n    try {\n      setLoading(true);\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n      // Reset form after successful submission\n      setForm({\n        _id: \"\",\n        profile: \"\",\n        desc: \"\",\n        exp: \"\",\n        techs: \"\"\n      });\n      if (mode === \"paid\") setPaid(false);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      alert(\"Error: \" + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Styles remain the same\n  const containerStyle = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"100vh\",\n    background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\"\n  };\n  const formBox = {\n    background: \"#fff\",\n    padding: \"2rem\",\n    borderRadius: \"10px\",\n    boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n    width: \"400px\",\n    textAlign: \"center\"\n  };\n  const headingStyle = {\n    marginBottom: \"1rem\",\n    color: \"#4b0082\"\n  };\n  const inputStyle = {\n    width: \"100%\",\n    padding: \"10px\",\n    marginBottom: \"1rem\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\"\n  };\n  const textareaStyle = {\n    width: \"100%\",\n    padding: \"10px\",\n    height: \"80px\",\n    marginBottom: \"1rem\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\"\n  };\n  const btnStyle = {\n    marginBottom: \"1rem\",\n    padding: \"10px 20px\",\n    backgroundColor: \"#6a1b9a\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n    fontSize: \"15px\",\n    opacity: loading ? 0.7 : 1,\n    pointerEvents: loading ? \"none\" : \"auto\"\n  };\n  const submitStyle = {\n    width: \"100%\",\n    padding: \"12px\",\n    backgroundColor: \"#4b0082\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"6px\",\n    fontSize: \"16px\",\n    cursor: \"pointer\",\n    opacity: loading ? 0.7 : 1,\n    pointerEvents: loading ? \"none\" : \"auto\"\n  };\n  const activeBtn = {\n    ...btnStyle,\n    backgroundColor: \"#4b0082\",\n    marginRight: \"10px\"\n  };\n  const inactiveBtn = {\n    ...btnStyle,\n    backgroundColor: \"#bbb\",\n    marginRight: \"10px\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: formBox,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: headingStyle,\n        children: \"Post a New Job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setMode(\"paid\"),\n          style: mode === \"paid\" ? activeBtn : inactiveBtn,\n          disabled: loading,\n          children: \"Post With Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setMode(\"free\"),\n          style: mode === \"free\" ? activeBtn : inactiveBtn,\n          disabled: loading,\n          children: \"Post Without Payment (Demo)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this), mode === \"paid\" && !walletAddress && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        style: btnStyle,\n        disabled: loading,\n        children: loading ? \"Connecting...\" : \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 11\n      }, this), mode === \"paid\" && walletAddress && !paid && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: payPlatformFee,\n        style: btnStyle,\n        disabled: loading,\n        children: loading ? \"Processing...\" : `Pay ${platformFee} AMOY`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 11\n      }, this), mode === \"paid\" && paid && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"green\",\n          fontWeight: \"bold\"\n        },\n        children: \"\\u2714 Payment Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"_id\",\n          placeholder: \"Job ID\",\n          value: form._id,\n          onChange: handleChange,\n          required: true,\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"profile\",\n          placeholder: \"Profile\",\n          value: form.profile,\n          onChange: handleChange,\n          required: true,\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"desc\",\n          placeholder: \"Description\",\n          value: form.desc,\n          onChange: handleChange,\n          required: true,\n          style: textareaStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"exp\",\n          type: \"number\",\n          placeholder: \"Experience (years)\",\n          value: form.exp,\n          onChange: handleChange,\n          required: true,\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"techs\",\n          placeholder: \"Techs (comma separated)\",\n          value: form.techs,\n          onChange: handleChange,\n          required: true,\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: submitStyle,\n          disabled: loading,\n          children: loading ? \"Submitting...\" : \"Post Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 611,\n    columnNumber: 5\n  }, this);\n}\n_s(PostJob, \"90WiOmMvCmWZvF7OxxM2XUToPK8=\");\n_c = PostJob;\nexport default PostJob;\nvar _c;\n$RefreshReg$(_c, \"PostJob\");","map":{"version":3,"names":["useState","ethers","axios","jsxDEV","_jsxDEV","PostJob","_s","mode","setMode","form","setForm","_id","profile","desc","exp","techs","walletAddress","setWalletAddress","paid","setPaid","loading","setLoading","platformFee","receiverAddress","handleChange","e","target","name","value","connectWallet","window","ethereum","alert","request","method","params","chainId","provider","BrowserProvider","accounts","balance","getBalance","console","log","formatEther","err","code","addPolygonAmoyNetwork","message","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","payPlatformFee","signer","getSigner","feeData","getFeeData","gasEstimate","estimateGas","from","to","parseEther","requiredBalance","gasPrice","Error","tx","sendTransaction","gasLimit","maxFeePerGas","maxPriorityFeePerGas","wait","reason","error","handleSubmit","preventDefault","payload","parseInt","split","map","t","trim","payerAddress","res","post","data","_err$response","_err$response$data","response","containerStyle","display","justifyContent","alignItems","minHeight","background","formBox","padding","borderRadius","boxShadow","width","textAlign","headingStyle","marginBottom","color","inputStyle","border","textareaStyle","height","btnStyle","backgroundColor","cursor","fontSize","opacity","pointerEvents","submitStyle","activeBtn","marginRight","inactiveBtn","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","fontWeight","onSubmit","placeholder","onChange","required","type","_c","$RefreshReg$"],"sources":["/home/rgukt-basar/Downloads/placement-prep-starter/client/src/components/PostJob.js"],"sourcesContent":["/*import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const platformFee = \"0.001\"; // ETH or MATIC\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"Wallet connection failed\");\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const tx = await signer.sendTransaction({\n        to: \"0xF2f8466780f45536bC254d0882A4F6608b631b88\",\n        value: ethers.parseEther(platformFee),\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + err.message);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n    } catch (err) {\n      alert(\"Error: \" + err.response.data.error);\n    }\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        {}\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button onClick={() => setMode(\"paid\")} style={mode === \"paid\" ? activeBtn : inactiveBtn}>\n            Post With Payment\n          </button>\n          <button onClick={() => setMode(\"free\")} style={mode === \"free\" ? activeBtn : inactiveBtn}>\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {}\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle}>Connect Wallet</button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle}>Pay {platformFee} ETH</button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input name=\"_id\" placeholder=\"Job ID\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"profile\" placeholder=\"Profile\" onChange={handleChange} required style={inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Description\" onChange={handleChange} required style={textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"techs\" placeholder=\"Techs (comma separated)\" onChange={handleChange} required style={inputStyle} />\n          <button type=\"submit\" style={submitStyle}>\n            Post Job\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Styles\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n};\n\nconst formBox = {\n  background: \"#fff\",\n  padding: \"2rem\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n  width: \"400px\",\n  textAlign: \"center\",\n};\n\nconst headingStyle = {\n  marginBottom: \"1rem\",\n  color: \"#4b0082\",\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst textareaStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  height: \"80px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst btnStyle = {\n  marginBottom: \"1rem\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#6a1b9a\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  fontSize: \"15px\",\n};\n\nconst submitStyle = {\n  width: \"100%\",\n  padding: \"12px\",\n  backgroundColor: \"#4b0082\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"6px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst activeBtn = {\n  ...btnStyle,\n  backgroundColor: \"#4b0082\",\n  marginRight: \"10px\",\n};\n\nconst inactiveBtn = {\n  ...btnStyle,\n  backgroundColor: \"#bbb\",\n  marginRight: \"10px\",\n};\n\nexport default PostJob;*/\n/*import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const platformFee = \"0.00001\"; // in MATIC\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"Wallet connection failed\");\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const tx = await signer.sendTransaction({\n        to: \"0x0A499e74e5C49e111a9D86Ae6A5f1306982782Bf\",\n        value: ethers.parseEther(platformFee),\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + err.message);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n    } catch (err) {\n      alert(\"Error: \" + err?.response?.data?.error || \"Something went wrong\");\n    }\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        {}\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button onClick={() => setMode(\"paid\")} style={mode === \"paid\" ? activeBtn : inactiveBtn}>\n            Post With Payment\n          </button>\n          <button onClick={() => setMode(\"free\")} style={mode === \"free\" ? activeBtn : inactiveBtn}>\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {}\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle}>Connect Wallet</button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle}>Pay {platformFee} MATIC</button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input name=\"_id\" placeholder=\"Job ID\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"profile\" placeholder=\"Profile\" onChange={handleChange} required style={inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Description\" onChange={handleChange} required style={textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"techs\" placeholder=\"Techs (comma separated)\" onChange={handleChange} required style={inputStyle} />\n          <button type=\"submit\" style={submitStyle}>\n            Post Job\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Styles\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n};\n\nconst formBox = {\n  background: \"#fff\",\n  padding: \"2rem\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n  width: \"400px\",\n  textAlign: \"center\",\n};\n\nconst headingStyle = {\n  marginBottom: \"1rem\",\n  color: \"#4b0082\",\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst textareaStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  height: \"80px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst btnStyle = {\n  marginBottom: \"1rem\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#6a1b9a\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  fontSize: \"15px\",\n};\n\nconst submitStyle = {\n  width: \"100%\",\n  padding: \"12px\",\n  backgroundColor: \"#4b0082\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"6px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst activeBtn = {\n  ...btnStyle,\n  backgroundColor: \"#4b0082\",\n  marginRight: \"10px\",\n};\n\nconst inactiveBtn = {\n  ...btnStyle,\n  backgroundColor: \"#bbb\",\n  marginRight: \"10px\",\n};\n\nexport default PostJob;*/\n\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const platformFee = \"0.00001\"; // in AMOY for Polygon Amoy Testnet\n  const receiverAddress = \"0x0A499e74e5C49e111a9D86Ae6A5f1306982782Bf\"; // Replace with your actual receiver address\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      setLoading(true);\n      // First ensure we're on Polygon Amoy Testnet\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: \"0x13882\" }], // Polygon Amoy chainId\n      });\n\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ \n        method: \"eth_requestAccounts\" \n      });\n      setWalletAddress(accounts[0]);\n      \n      // Verify balance\n      const balance = await provider.getBalance(accounts[0]);\n      console.log(\"AMOY Balance:\", ethers.formatEther(balance));\n    } catch (err) {\n      if (err.code === 4902) {\n        // Network not added, let's add it\n        await addPolygonAmoyNetwork();\n        await connectWallet(); // Retry connection\n      } else {\n        alert(\"Wallet connection failed: \" + err.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addPolygonAmoyNetwork = async () => {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId: \"0x13882\",\n          chainName: \"Polygon Amoy Testnet\",\n          nativeCurrency: {\n            name: \"AMOY\",\n            symbol: \"AMOY\",\n            decimals: 18\n          },\n          rpcUrls: [\"https://rpc-amoy.polygon.technology\"],\n          blockExplorerUrls: [\"https://www.oklink.com/amoy\"]\n        }]\n      });\n    } catch (err) {\n      alert(\"Failed to add Polygon Amoy network: \" + err.message);\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      setLoading(true);\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      \n      // Get fee data (replaces getGasPrice in ethers v6)\n      const feeData = await provider.getFeeData();\n      \n      // Get gas estimate\n      const gasEstimate = await provider.estimateGas({\n        from: walletAddress,\n        to: receiverAddress,\n        value: ethers.parseEther(platformFee)\n      });\n\n      // Check balance\n      const balance = await provider.getBalance(walletAddress);\n      const requiredBalance = gasEstimate * feeData.gasPrice + ethers.parseEther(platformFee);\n      \n      if (balance < requiredBalance) {\n        throw new Error(`Insufficient funds. Need ${ethers.formatEther(requiredBalance)} AMOY but have ${ethers.formatEther(balance)}`);\n      }\n\n      const tx = await signer.sendTransaction({\n        to: receiverAddress,\n        value: ethers.parseEther(platformFee),\n        gasLimit: gasEstimate,\n        maxFeePerGas: feeData.maxFeePerGas,\n        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas\n      });\n      \n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + (err.reason || err.message));\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n      payerAddress: mode === \"paid\" ? walletAddress : null\n    };\n\n    try {\n      setLoading(true);\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n      // Reset form after successful submission\n      setForm({\n        _id: \"\",\n        profile: \"\",\n        desc: \"\",\n        exp: \"\",\n        techs: \"\",\n      });\n      if (mode === \"paid\") setPaid(false);\n    } catch (err) {\n      alert(\"Error: \" + (err.response?.data?.error || err.message));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Styles remain the same\n  const containerStyle = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"100vh\",\n    background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n  };\n\n  const formBox = {\n    background: \"#fff\",\n    padding: \"2rem\",\n    borderRadius: \"10px\",\n    boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n    width: \"400px\",\n    textAlign: \"center\",\n  };\n\n  const headingStyle = {\n    marginBottom: \"1rem\",\n    color: \"#4b0082\",\n  };\n\n  const inputStyle = {\n    width: \"100%\",\n    padding: \"10px\",\n    marginBottom: \"1rem\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\",\n  };\n\n  const textareaStyle = {\n    width: \"100%\",\n    padding: \"10px\",\n    height: \"80px\",\n    marginBottom: \"1rem\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\",\n  };\n\n  const btnStyle = {\n    marginBottom: \"1rem\",\n    padding: \"10px 20px\",\n    backgroundColor: \"#6a1b9a\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n    fontSize: \"15px\",\n    opacity: loading ? 0.7 : 1,\n    pointerEvents: loading ? \"none\" : \"auto\",\n  };\n\n  const submitStyle = {\n    width: \"100%\",\n    padding: \"12px\",\n    backgroundColor: \"#4b0082\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"6px\",\n    fontSize: \"16px\",\n    cursor: \"pointer\",\n    opacity: loading ? 0.7 : 1,\n    pointerEvents: loading ? \"none\" : \"auto\",\n  };\n\n  const activeBtn = {\n    ...btnStyle,\n    backgroundColor: \"#4b0082\",\n    marginRight: \"10px\",\n  };\n\n  const inactiveBtn = {\n    ...btnStyle,\n    backgroundColor: \"#bbb\",\n    marginRight: \"10px\",\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button \n            onClick={() => setMode(\"paid\")} \n            style={mode === \"paid\" ? activeBtn : inactiveBtn}\n            disabled={loading}\n          >\n            Post With Payment\n          </button>\n          <button \n            onClick={() => setMode(\"free\")} \n            style={mode === \"free\" ? activeBtn : inactiveBtn}\n            disabled={loading}\n          >\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle} disabled={loading}>\n            {loading ? \"Connecting...\" : \"Connect Wallet\"}\n          </button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle} disabled={loading}>\n            {loading ? \"Processing...\" : `Pay ${platformFee} AMOY`}\n          </button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input \n            name=\"_id\" \n            placeholder=\"Job ID\" \n            value={form._id}\n            onChange={handleChange} \n            required \n            style={inputStyle} \n          />\n          <input \n            name=\"profile\" \n            placeholder=\"Profile\" \n            value={form.profile}\n            onChange={handleChange} \n            required \n            style={inputStyle} \n          />\n          <textarea \n            name=\"desc\" \n            placeholder=\"Description\" \n            value={form.desc}\n            onChange={handleChange} \n            required \n            style={textareaStyle} \n          />\n          <input \n            name=\"exp\" \n            type=\"number\" \n            placeholder=\"Experience (years)\" \n            value={form.exp}\n            onChange={handleChange} \n            required \n            style={inputStyle} \n          />\n          <input \n            name=\"techs\" \n            placeholder=\"Techs (comma separated)\" \n            value={form.techs}\n            onChange={handleChange} \n            required \n            style={inputStyle} \n          />\n          <button type=\"submit\" style={submitStyle} disabled={loading}>\n            {loading ? \"Submitting...\" : \"Post Job\"}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default PostJob;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}