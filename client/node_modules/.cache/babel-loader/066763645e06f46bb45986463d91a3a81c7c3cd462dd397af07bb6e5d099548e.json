{"ast":null,"code":"var _jsxFileName = \"/home/rgukt-basar/Downloads/placement-prep-starter/client/src/components/PostJob.js\",\n  _s = $RefreshSig$();\n/*import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const platformFee = \"0.001\"; // ETH or MATIC\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"Wallet connection failed\");\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const tx = await signer.sendTransaction({\n        to: \"0xF2f8466780f45536bC254d0882A4F6608b631b88\",\n        value: ethers.parseEther(platformFee),\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + err.message);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n    } catch (err) {\n      alert(\"Error: \" + err.response.data.error);\n    }\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        {}\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button onClick={() => setMode(\"paid\")} style={mode === \"paid\" ? activeBtn : inactiveBtn}>\n            Post With Payment\n          </button>\n          <button onClick={() => setMode(\"free\")} style={mode === \"free\" ? activeBtn : inactiveBtn}>\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {}\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle}>Connect Wallet</button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle}>Pay {platformFee} ETH</button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input name=\"_id\" placeholder=\"Job ID\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"profile\" placeholder=\"Profile\" onChange={handleChange} required style={inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Description\" onChange={handleChange} required style={textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"techs\" placeholder=\"Techs (comma separated)\" onChange={handleChange} required style={inputStyle} />\n          <button type=\"submit\" style={submitStyle}>\n            Post Job\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Styles\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n};\n\nconst formBox = {\n  background: \"#fff\",\n  padding: \"2rem\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n  width: \"400px\",\n  textAlign: \"center\",\n};\n\nconst headingStyle = {\n  marginBottom: \"1rem\",\n  color: \"#4b0082\",\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst textareaStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  height: \"80px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst btnStyle = {\n  marginBottom: \"1rem\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#6a1b9a\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  fontSize: \"15px\",\n};\n\nconst submitStyle = {\n  width: \"100%\",\n  padding: \"12px\",\n  backgroundColor: \"#4b0082\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"6px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst activeBtn = {\n  ...btnStyle,\n  backgroundColor: \"#4b0082\",\n  marginRight: \"10px\",\n};\n\nconst inactiveBtn = {\n  ...btnStyle,\n  backgroundColor: \"#bbb\",\n  marginRight: \"10px\",\n};\n\nexport default PostJob;*/\n/*import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const platformFee = \"0.00001\"; // in MATIC\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"Wallet connection failed\");\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const tx = await signer.sendTransaction({\n        to: \"0x0A499e74e5C49e111a9D86Ae6A5f1306982782Bf\",\n        value: ethers.parseEther(platformFee),\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + err.message);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n    } catch (err) {\n      alert(\"Error: \" + err?.response?.data?.error || \"Something went wrong\");\n    }\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        {}\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button onClick={() => setMode(\"paid\")} style={mode === \"paid\" ? activeBtn : inactiveBtn}>\n            Post With Payment\n          </button>\n          <button onClick={() => setMode(\"free\")} style={mode === \"free\" ? activeBtn : inactiveBtn}>\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {}\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle}>Connect Wallet</button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle}>Pay {platformFee} MATIC</button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input name=\"_id\" placeholder=\"Job ID\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"profile\" placeholder=\"Profile\" onChange={handleChange} required style={inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Description\" onChange={handleChange} required style={textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"techs\" placeholder=\"Techs (comma separated)\" onChange={handleChange} required style={inputStyle} />\n          <button type=\"submit\" style={submitStyle}>\n            Post Job\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Styles\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n};\n\nconst formBox = {\n  background: \"#fff\",\n  padding: \"2rem\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n  width: \"400px\",\n  textAlign: \"center\",\n};\n\nconst headingStyle = {\n  marginBottom: \"1rem\",\n  color: \"#4b0082\",\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst textareaStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  height: \"80px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst btnStyle = {\n  marginBottom: \"1rem\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#6a1b9a\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  fontSize: \"15px\",\n};\n\nconst submitStyle = {\n  width: \"100%\",\n  padding: \"12px\",\n  backgroundColor: \"#4b0082\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"6px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst activeBtn = {\n  ...btnStyle,\n  backgroundColor: \"#4b0082\",\n  marginRight: \"10px\",\n};\n\nconst inactiveBtn = {\n  ...btnStyle,\n  backgroundColor: \"#bbb\",\n  marginRight: \"10px\",\n};\n\nexport default PostJob;*/\n\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\n// --- Constants for easy configuration ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst POLYGON_AMOY_CHAIN_ID = \"0x13882\"; // 80002\nconst PLATFORM_FEE_AMOY = \"0.00001\";\nconst RECEIVER_ADDRESS = \"0x0A499e74e5C49e111a9D86Ae6A5f1306982782Bf\";\nconst API_URL = \"http://localhost:5000/api/jobs\";\nfunction PostJob() {\n  _s();\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\"\n  });\n\n  // --- State for UI and Wallet ---\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [isPaid, setIsPaid] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(null); // { text: '', type: 'success' | 'error' }\n\n  // --- Clear messages when switching modes ---\n  useEffect(() => {\n    setMessage(null);\n  }, [mode]);\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleWalletAction = async action => {\n    if (!window.ethereum) {\n      setMessage({\n        text: \"MetaMask not detected. Please install it.\",\n        type: \"error\"\n      });\n      return;\n    }\n    setLoading(true);\n    setMessage(null);\n    try {\n      await action();\n    } catch (err) {\n      // Handle specific errors from MetaMask or the transaction\n      let errorMessage = \"An unexpected error occurred.\";\n      if (err.code === 4001 || err.code === \"ACTION_REJECTED\") {\n        errorMessage = \"Request rejected in wallet.\";\n      } else if (err.code === 4902) {\n        // Chain not added, try adding it\n        await addPolygonAmoyNetwork();\n        // Optionally, retry the action after adding the network\n        // await action(); \n      } else if (err.reason) {\n        errorMessage = err.reason;\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      setMessage({\n        text: errorMessage,\n        type: \"error\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const connectWallet = () => handleWalletAction(async () => {\n    await window.ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{\n        chainId: POLYGON_AMOY_CHAIN_ID\n      }]\n    });\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\n    setWalletAddress(accounts[0]);\n    setMessage({\n      text: \"Wallet connected successfully!\",\n      type: \"success\"\n    });\n  });\n  const addPolygonAmoyNetwork = async () => {\n    await window.ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: POLYGON_AMOY_CHAIN_ID,\n        chainName: \"Polygon Amoy Testnet\",\n        nativeCurrency: {\n          name: \"AMOY\",\n          symbol: \"AMOY\",\n          decimals: 18\n        },\n        rpcUrls: [\"https://rpc-amoy.polygon.technology\"],\n        blockExplorerUrls: [\"https://www.oklink.com/amoy\"]\n      }]\n    });\n  };\n  const payPlatformFee = () => handleWalletAction(async () => {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const value = ethers.parseEther(PLATFORM_FEE_AMOY);\n    const tx = await signer.sendTransaction({\n      to: RECEIVER_ADDRESS,\n      value: value\n    });\n    setMessage({\n      text: \"Processing payment... please wait.\",\n      type: \"info\"\n    });\n    const receipt = await tx.wait();\n    if (receipt.status === 1) {\n      setMessage({\n        text: \"Payment Successful!\",\n        type: \"success\"\n      });\n      setIsPaid(true);\n    } else {\n      throw new Error(\"Transaction failed on-chain.\");\n    }\n  });\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (mode === \"paid\" && !isPaid) {\n      setMessage({\n        text: \"Please pay the platform fee before submitting.\",\n        type: \"error\"\n      });\n      return;\n    }\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp, 10),\n      techs: form.techs.split(\",\").map(t => t.trim()),\n      payerAddress: mode === \"paid\" ? walletAddress : \"free_submission\"\n    };\n    setLoading(true);\n    setMessage(null);\n    try {\n      const res = await axios.post(API_URL, payload);\n      setMessage({\n        text: res.data.message || \"Job posted successfully!\",\n        type: \"success\"\n      });\n      setForm({\n        _id: \"\",\n        profile: \"\",\n        desc: \"\",\n        exp: \"\",\n        techs: \"\"\n      });\n      if (mode === \"paid\") setIsPaid(false);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorText = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message;\n      setMessage({\n        text: `Submission Failed: ${errorText}`,\n        type: \"error\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.formBox,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: styles.heading,\n        children: \"Post a New Job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.message,\n          ...styles[message.type]\n        },\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.modeSelector,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setMode(\"paid\"),\n          style: mode === \"paid\" ? styles.activeBtn : styles.inactiveBtn,\n          disabled: loading,\n          children: \"Paid Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setMode(\"free\"),\n          style: mode === \"free\" ? styles.activeBtn : styles.inactiveBtn,\n          disabled: loading,\n          children: \"Free Post (Demo)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), mode === \"paid\" && !walletAddress && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        style: styles.btnStyle,\n        disabled: loading,\n        children: loading ? \"Connecting...\" : \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 11\n      }, this), mode === \"paid\" && walletAddress && !isPaid && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: styles.walletInfo,\n          children: [\"Connected: \", `${walletAddress.substring(0, 6)}...${walletAddress.substring(38)}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: payPlatformFee,\n          style: styles.btnStyle,\n          disabled: loading,\n          children: loading ? \"Processing...\" : `Pay ${PLATFORM_FEE_AMOY} AMOY`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        style: {\n          marginTop: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"_id\",\n          placeholder: \"Job ID\",\n          value: form._id,\n          onChange: handleChange,\n          required: true,\n          style: styles.inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"profile\",\n          placeholder: \"Job Profile (e.g., Frontend Developer)\",\n          value: form.profile,\n          onChange: handleChange,\n          required: true,\n          style: styles.inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"desc\",\n          placeholder: \"Job Description\",\n          value: form.desc,\n          onChange: handleChange,\n          required: true,\n          style: styles.textareaStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"exp\",\n          type: \"number\",\n          placeholder: \"Experience (years)\",\n          value: form.exp,\n          onChange: handleChange,\n          required: true,\n          style: styles.inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"techs\",\n          placeholder: \"Required Techs (comma separated)\",\n          value: form.techs,\n          onChange: handleChange,\n          required: true,\n          style: styles.inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: styles.submitStyle,\n          disabled: loading,\n          children: loading ? \"Submitting...\" : \"Post Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 5\n  }, this);\n}\n\n// --- Styles Object ---\n_s(PostJob, \"wE5GTxDpbex7zj1ftlzKNEoNsb8=\");\n_c = PostJob;\nconst styles = {\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"100vh\",\n    background: \"linear-gradient(to right, #f8f0ff, #e6f0ff)\",\n    padding: \"20px\",\n    fontFamily: \"Arial, sans-serif\"\n  },\n  formBox: {\n    background: \"#fff\",\n    padding: \"2rem\",\n    borderRadius: \"12px\",\n    boxShadow: \"0 6px 25px rgba(0, 0, 0, 0.1)\",\n    width: \"100%\",\n    maxWidth: \"450px\",\n    textAlign: \"center\"\n  },\n  heading: {\n    marginBottom: \"1.5rem\",\n    color: \"#5e35b1\"\n  },\n  modeSelector: {\n    marginBottom: \"1rem\",\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  inputStyle: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    padding: \"12px\",\n    marginBottom: \"1rem\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"8px\",\n    fontSize: \"16px\"\n  },\n  textareaStyle: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    padding: \"12px\",\n    marginBottom: \"1rem\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"8px\",\n    fontSize: \"16px\",\n    height: \"100px\",\n    resize: \"vertical\"\n  },\n  btnStyle: {\n    width: \"100%\",\n    marginBottom: \"1rem\",\n    padding: \"12px 20px\",\n    backgroundColor: \"#7e57c2\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    fontSize: \"16px\",\n    transition: \"background-color 0.2s\"\n  },\n  activeBtn: {\n    padding: \"10px 20px\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    fontSize: \"15px\",\n    backgroundColor: \"#5e35b1\",\n    color: \"white\",\n    margin: \"0 5px\"\n  },\n  inactiveBtn: {\n    padding: \"10px 20px\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    fontSize: \"15px\",\n    backgroundColor: \"#e0e0e0\",\n    color: \"#333\",\n    margin: \"0 5px\"\n  },\n  submitStyle: {\n    width: \"100%\",\n    padding: \"14px\",\n    backgroundColor: \"#5e35b1\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    fontSize: \"16px\",\n    fontWeight: \"bold\",\n    cursor: \"pointer\"\n  },\n  message: {\n    padding: '12px',\n    marginBottom: '1rem',\n    borderRadius: '8px',\n    textAlign: 'center',\n    fontWeight: '500'\n  },\n  success: {\n    backgroundColor: '#d1f4e0',\n    color: '#11814b'\n  },\n  error: {\n    backgroundColor: '#fde2e1',\n    color: '#b91c1c'\n  },\n  info: {\n    backgroundColor: '#e0f7fa',\n    color: '#006064'\n  },\n  walletInfo: {\n    fontSize: '14px',\n    color: '#666',\n    marginBottom: '1rem',\n    wordBreak: 'break-all'\n  }\n};\nexport default PostJob;\nvar _c;\n$RefreshReg$(_c, \"PostJob\");","map":{"version":3,"names":["useState","useEffect","ethers","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","POLYGON_AMOY_CHAIN_ID","PLATFORM_FEE_AMOY","RECEIVER_ADDRESS","API_URL","PostJob","_s","mode","setMode","form","setForm","_id","profile","desc","exp","techs","walletAddress","setWalletAddress","isPaid","setIsPaid","loading","setLoading","message","setMessage","handleChange","e","target","name","value","handleWalletAction","action","window","ethereum","text","type","err","errorMessage","code","addPolygonAmoyNetwork","reason","connectWallet","request","method","params","chainId","provider","BrowserProvider","accounts","send","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","payPlatformFee","signer","getSigner","parseEther","tx","sendTransaction","to","receipt","wait","status","Error","handleSubmit","preventDefault","payload","parseInt","split","map","t","trim","payerAddress","res","post","data","_err$response","_err$response$data","errorText","response","error","style","styles","container","children","formBox","heading","fileName","_jsxFileName","lineNumber","columnNumber","modeSelector","onClick","activeBtn","inactiveBtn","disabled","btnStyle","walletInfo","substring","onSubmit","marginTop","placeholder","onChange","required","inputStyle","textareaStyle","submitStyle","_c","display","justifyContent","alignItems","minHeight","background","padding","fontFamily","borderRadius","boxShadow","width","maxWidth","textAlign","marginBottom","color","boxSizing","border","fontSize","height","resize","backgroundColor","cursor","transition","margin","fontWeight","success","info","wordBreak","$RefreshReg$"],"sources":["/home/rgukt-basar/Downloads/placement-prep-starter/client/src/components/PostJob.js"],"sourcesContent":["/*import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const platformFee = \"0.001\"; // ETH or MATIC\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"Wallet connection failed\");\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const tx = await signer.sendTransaction({\n        to: \"0xF2f8466780f45536bC254d0882A4F6608b631b88\",\n        value: ethers.parseEther(platformFee),\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + err.message);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n    } catch (err) {\n      alert(\"Error: \" + err.response.data.error);\n    }\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        {}\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button onClick={() => setMode(\"paid\")} style={mode === \"paid\" ? activeBtn : inactiveBtn}>\n            Post With Payment\n          </button>\n          <button onClick={() => setMode(\"free\")} style={mode === \"free\" ? activeBtn : inactiveBtn}>\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {}\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle}>Connect Wallet</button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle}>Pay {platformFee} ETH</button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input name=\"_id\" placeholder=\"Job ID\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"profile\" placeholder=\"Profile\" onChange={handleChange} required style={inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Description\" onChange={handleChange} required style={textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"techs\" placeholder=\"Techs (comma separated)\" onChange={handleChange} required style={inputStyle} />\n          <button type=\"submit\" style={submitStyle}>\n            Post Job\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Styles\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n};\n\nconst formBox = {\n  background: \"#fff\",\n  padding: \"2rem\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n  width: \"400px\",\n  textAlign: \"center\",\n};\n\nconst headingStyle = {\n  marginBottom: \"1rem\",\n  color: \"#4b0082\",\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst textareaStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  height: \"80px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst btnStyle = {\n  marginBottom: \"1rem\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#6a1b9a\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  fontSize: \"15px\",\n};\n\nconst submitStyle = {\n  width: \"100%\",\n  padding: \"12px\",\n  backgroundColor: \"#4b0082\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"6px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst activeBtn = {\n  ...btnStyle,\n  backgroundColor: \"#4b0082\",\n  marginRight: \"10px\",\n};\n\nconst inactiveBtn = {\n  ...btnStyle,\n  backgroundColor: \"#bbb\",\n  marginRight: \"10px\",\n};\n\nexport default PostJob;*/\n/*import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [paid, setPaid] = useState(false);\n  const platformFee = \"0.00001\"; // in MATIC\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) return alert(\"MetaMask not detected\");\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"Wallet connection failed\");\n    }\n  };\n\n  const payPlatformFee = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const tx = await signer.sendTransaction({\n        to: \"0x0A499e74e5C49e111a9D86Ae6A5f1306982782Bf\",\n        value: ethers.parseEther(platformFee),\n      });\n      await tx.wait();\n      alert(\"Payment Successful\");\n      setPaid(true);\n    } catch (err) {\n      alert(\"Payment failed: \" + err.message);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (mode === \"paid\" && !paid) {\n      return alert(\"Please pay the platform fee first\");\n    }\n\n    const payload = {\n      ...form,\n      exp: parseInt(form.exp),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/jobs\", payload);\n      alert(res.data.message);\n    } catch (err) {\n      alert(\"Error: \" + err?.response?.data?.error || \"Something went wrong\");\n    }\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={formBox}>\n        <h2 style={headingStyle}>Post a New Job</h2>\n\n        {}\n        <div style={{ marginBottom: \"1rem\" }}>\n          <button onClick={() => setMode(\"paid\")} style={mode === \"paid\" ? activeBtn : inactiveBtn}>\n            Post With Payment\n          </button>\n          <button onClick={() => setMode(\"free\")} style={mode === \"free\" ? activeBtn : inactiveBtn}>\n            Post Without Payment (Demo)\n          </button>\n        </div>\n\n        {}\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={btnStyle}>Connect Wallet</button>\n        )}\n        {mode === \"paid\" && walletAddress && !paid && (\n          <button onClick={payPlatformFee} style={btnStyle}>Pay {platformFee} MATIC</button>\n        )}\n        {mode === \"paid\" && paid && (\n          <p style={{ color: \"green\", fontWeight: \"bold\" }}>✔ Payment Complete</p>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <input name=\"_id\" placeholder=\"Job ID\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"profile\" placeholder=\"Profile\" onChange={handleChange} required style={inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Description\" onChange={handleChange} required style={textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" onChange={handleChange} required style={inputStyle} />\n          <input name=\"techs\" placeholder=\"Techs (comma separated)\" onChange={handleChange} required style={inputStyle} />\n          <button type=\"submit\" style={submitStyle}>\n            Post Job\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// Styles\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  background: \"linear-gradient(to right, #e0c3fc, #8ec5fc)\",\n};\n\nconst formBox = {\n  background: \"#fff\",\n  padding: \"2rem\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\n  width: \"400px\",\n  textAlign: \"center\",\n};\n\nconst headingStyle = {\n  marginBottom: \"1rem\",\n  color: \"#4b0082\",\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst textareaStyle = {\n  width: \"100%\",\n  padding: \"10px\",\n  height: \"80px\",\n  marginBottom: \"1rem\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"5px\",\n};\n\nconst btnStyle = {\n  marginBottom: \"1rem\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#6a1b9a\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  fontSize: \"15px\",\n};\n\nconst submitStyle = {\n  width: \"100%\",\n  padding: \"12px\",\n  backgroundColor: \"#4b0082\",\n  color: \"white\",\n  border: \"none\",\n  borderRadius: \"6px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst activeBtn = {\n  ...btnStyle,\n  backgroundColor: \"#4b0082\",\n  marginRight: \"10px\",\n};\n\nconst inactiveBtn = {\n  ...btnStyle,\n  backgroundColor: \"#bbb\",\n  marginRight: \"10px\",\n};\n\nexport default PostJob;*/\n\n\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\n// --- Constants for easy configuration ---\nconst POLYGON_AMOY_CHAIN_ID = \"0x13882\"; // 80002\nconst PLATFORM_FEE_AMOY = \"0.00001\";\nconst RECEIVER_ADDRESS = \"0x0A499e74e5C49e111a9D86Ae6A5f1306982782Bf\";\nconst API_URL = \"http://localhost:5000/api/jobs\";\n\nfunction PostJob() {\n  const [mode, setMode] = useState(\"paid\"); // \"paid\" or \"free\"\n  const [form, setForm] = useState({\n    _id: \"\",\n    profile: \"\",\n    desc: \"\",\n    exp: \"\",\n    techs: \"\",\n  });\n  \n  // --- State for UI and Wallet ---\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [isPaid, setIsPaid] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(null); // { text: '', type: 'success' | 'error' }\n\n  // --- Clear messages when switching modes ---\n  useEffect(() => {\n    setMessage(null);\n  }, [mode]);\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n  \n  const handleWalletAction = async (action) => {\n    if (!window.ethereum) {\n      setMessage({ text: \"MetaMask not detected. Please install it.\", type: \"error\" });\n      return;\n    }\n    setLoading(true);\n    setMessage(null);\n    try {\n      await action();\n    } catch (err) {\n      // Handle specific errors from MetaMask or the transaction\n      let errorMessage = \"An unexpected error occurred.\";\n      if (err.code === 4001 || err.code === \"ACTION_REJECTED\") {\n        errorMessage = \"Request rejected in wallet.\";\n      } else if (err.code === 4902) {\n        // Chain not added, try adding it\n        await addPolygonAmoyNetwork();\n        // Optionally, retry the action after adding the network\n        // await action(); \n      } else if (err.reason) {\n        errorMessage = err.reason;\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      setMessage({ text: errorMessage, type: \"error\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const connectWallet = () => handleWalletAction(async () => {\n    await window.ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: POLYGON_AMOY_CHAIN_ID }],\n    });\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\n    setWalletAddress(accounts[0]);\n    setMessage({ text: \"Wallet connected successfully!\", type: \"success\" });\n  });\n\n  const addPolygonAmoyNetwork = async () => {\n    await window.ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: POLYGON_AMOY_CHAIN_ID,\n        chainName: \"Polygon Amoy Testnet\",\n        nativeCurrency: { name: \"AMOY\", symbol: \"AMOY\", decimals: 18 },\n        rpcUrls: [\"https://rpc-amoy.polygon.technology\"],\n        blockExplorerUrls: [\"https://www.oklink.com/amoy\"]\n      }]\n    });\n  };\n\n  const payPlatformFee = () => handleWalletAction(async () => {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    \n    const value = ethers.parseEther(PLATFORM_FEE_AMOY);\n    const tx = await signer.sendTransaction({\n      to: RECEIVER_ADDRESS,\n      value: value,\n    });\n\n    setMessage({ text: \"Processing payment... please wait.\", type: \"info\" });\n    const receipt = await tx.wait();\n\n    if (receipt.status === 1) {\n      setMessage({ text: \"Payment Successful!\", type: \"success\" });\n      setIsPaid(true);\n    } else {\n      throw new Error(\"Transaction failed on-chain.\");\n    }\n  });\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (mode === \"paid\" && !isPaid) {\n      setMessage({ text: \"Please pay the platform fee before submitting.\", type: \"error\" });\n      return;\n    }\n    \n    const payload = {\n      ...form,\n      exp: parseInt(form.exp, 10),\n      techs: form.techs.split(\",\").map((t) => t.trim()),\n      payerAddress: mode === \"paid\" ? walletAddress : \"free_submission\",\n    };\n\n    setLoading(true);\n    setMessage(null);\n    try {\n      const res = await axios.post(API_URL, payload);\n      setMessage({ text: res.data.message || \"Job posted successfully!\", type: \"success\" });\n      setForm({ _id: \"\", profile: \"\", desc: \"\", exp: \"\", techs: \"\" });\n      if (mode === \"paid\") setIsPaid(false);\n    } catch (err) {\n      const errorText = err.response?.data?.error || err.message;\n      setMessage({ text: `Submission Failed: ${errorText}`, type: \"error\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.formBox}>\n        <h2 style={styles.heading}>Post a New Job</h2>\n\n        {/* --- Message Display --- */}\n        {message && (\n          <div style={{...styles.message, ...styles[message.type]}}>\n            {message.text}\n          </div>\n        )}\n\n        <div style={styles.modeSelector}>\n          <button \n            onClick={() => setMode(\"paid\")} \n            style={mode === \"paid\" ? styles.activeBtn : styles.inactiveBtn}\n            disabled={loading}\n          >\n            Paid Post\n          </button>\n          <button \n            onClick={() => setMode(\"free\")} \n            style={mode === \"free\" ? styles.activeBtn : styles.inactiveBtn}\n            disabled={loading}\n          >\n            Free Post (Demo)\n          </button>\n        </div>\n\n        {mode === \"paid\" && !walletAddress && (\n          <button onClick={connectWallet} style={styles.btnStyle} disabled={loading}>\n            {loading ? \"Connecting...\" : \"Connect Wallet\"}\n          </button>\n        )}\n        \n        {mode === \"paid\" && walletAddress && !isPaid && (\n          <>\n            <p style={styles.walletInfo}>Connected: {`${walletAddress.substring(0, 6)}...${walletAddress.substring(38)}`}</p>\n            <button onClick={payPlatformFee} style={styles.btnStyle} disabled={loading}>\n              {loading ? \"Processing...\" : `Pay ${PLATFORM_FEE_AMOY} AMOY`}\n            </button>\n          </>\n        )}\n        \n        <form onSubmit={handleSubmit} style={{marginTop: \"1rem\"}}>\n          <input name=\"_id\" placeholder=\"Job ID\" value={form._id} onChange={handleChange} required style={styles.inputStyle} />\n          <input name=\"profile\" placeholder=\"Job Profile (e.g., Frontend Developer)\" value={form.profile} onChange={handleChange} required style={styles.inputStyle} />\n          <textarea name=\"desc\" placeholder=\"Job Description\" value={form.desc} onChange={handleChange} required style={styles.textareaStyle} />\n          <input name=\"exp\" type=\"number\" placeholder=\"Experience (years)\" value={form.exp} onChange={handleChange} required style={styles.inputStyle} />\n          <input name=\"techs\" placeholder=\"Required Techs (comma separated)\" value={form.techs} onChange={handleChange} required style={styles.inputStyle} />\n          <button type=\"submit\" style={styles.submitStyle} disabled={loading}>\n            {loading ? \"Submitting...\" : \"Post Job\"}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// --- Styles Object ---\nconst styles = {\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"100vh\",\n    background: \"linear-gradient(to right, #f8f0ff, #e6f0ff)\",\n    padding: \"20px\",\n    fontFamily: \"Arial, sans-serif\"\n  },\n  formBox: {\n    background: \"#fff\",\n    padding: \"2rem\",\n    borderRadius: \"12px\",\n    boxShadow: \"0 6px 25px rgba(0, 0, 0, 0.1)\",\n    width: \"100%\",\n    maxWidth: \"450px\",\n    textAlign: \"center\",\n  },\n  heading: {\n    marginBottom: \"1.5rem\",\n    color: \"#5e35b1\",\n  },\n  modeSelector: {\n    marginBottom: \"1rem\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  inputStyle: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    padding: \"12px\",\n    marginBottom: \"1rem\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"8px\",\n    fontSize: \"16px\"\n  },\n  textareaStyle: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    padding: \"12px\",\n    marginBottom: \"1rem\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"8px\",\n    fontSize: \"16px\",\n    height: \"100px\",\n    resize: \"vertical\"\n  },\n  btnStyle: {\n    width: \"100%\",\n    marginBottom: \"1rem\",\n    padding: \"12px 20px\",\n    backgroundColor: \"#7e57c2\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    fontSize: \"16px\",\n    transition: \"background-color 0.2s\",\n  },\n  activeBtn: {\n    padding: \"10px 20px\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    fontSize: \"15px\",\n    backgroundColor: \"#5e35b1\",\n    color: \"white\",\n    margin: \"0 5px\"\n  },\n  inactiveBtn: {\n    padding: \"10px 20px\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    fontSize: \"15px\",\n    backgroundColor: \"#e0e0e0\",\n    color: \"#333\",\n    margin: \"0 5px\"\n  },\n  submitStyle: {\n    width: \"100%\",\n    padding: \"14px\",\n    backgroundColor: \"#5e35b1\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    fontSize: \"16px\",\n    fontWeight: \"bold\",\n    cursor: \"pointer\",\n  },\n  message: {\n    padding: '12px',\n    marginBottom: '1rem',\n    borderRadius: '8px',\n    textAlign: 'center',\n    fontWeight: '500',\n  },\n  success: {\n    backgroundColor: '#d1f4e0',\n    color: '#11814b',\n  },\n  error: {\n    backgroundColor: '#fde2e1',\n    color: '#b91c1c',\n  },\n  info: {\n    backgroundColor: '#e0f7fa',\n    color: '#006064',\n  },\n  walletInfo: {\n    fontSize: '14px',\n    color: '#666',\n    marginBottom: '1rem',\n    wordBreak: 'break-all',\n  }\n};\n\nexport default PostJob;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}